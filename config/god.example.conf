SITE_ROOT = "/path/to/deploy"
unicorn_pid = "/path/to/unicorn/pid"
thin_pid = "/path/to/thin/pid"
sidekiq_pid = "/path/to/sidekiq/pid"
class God::Watch
  def apply_policy
    w = self
    w.dir = "#{SITE_ROOT}"
    w.interval = 30.seconds
    w.log = "#{SITE_ROOT}/log/god.log"
    w.env =
        { 'HOME' => "/deploy/user/home",
          'RAILS_ENV' => 'production',
          'RBENV_VERSION' => '2.1.1'
        }
    w.uid = 'deploy-user'
    w.gid = 'deploy-user'
    w.keepalive
    w.start_if do |start|
      start.condition(:process_running) do |c|
        c.interval = 10.seconds
        c.running = false
      end
    end

    w.restart_if do |restart|
      restart.condition(:memory_usage) do |c|
        c.above = 300.megabytes
        c.times = [3, 5] # 3 out of 5 intervals
      end
      restart.condition(:file_touched) do |c|
        c.interval = 5.seconds
        c.path = "#{SITE_ROOT}/tmp/restart.txt"
      end
      restart.condition(:cpu_usage) do |c|
        c.above = 80.percent
        c.times = 5
      end
    end

    # lifecycle
    w.lifecycle do |on|
      on.condition(:flapping) do |c|
        c.to_state = [:start, :restart]
        c.times = 5
        c.within = 5.minute
        c.transition = :unmonitored
        c.retry_in = 10.minutes
        c.retry_times = 5
        c.retry_within = 2.hours
      end
    end
  end
end

God.watch do |w|
  w.name = "App-Sidekiq"
  w.start = "cd #{SITE_ROOT} && rbenv exec bundle exec sidekiq -e $RAILS_ENV -C config/sidekiq.yml"

  w.start_grace = 30.seconds
  w.restart_grace = 30.seconds
  w.pid_file = sidekiq_pid
  w.behavior(:clean_pid_file)

  w.apply_policy
end


God.watch do |w|
  w.name = "App"
  w.start = "cd #{SITE_ROOT} && rbenv exec bundle exec unicorn_rails -c config/unicorn.rb -E production -D"
  w.stop = "kill -QUIT `cat #{unicorn_pid}`"
  w.restart = "kill -USR2 `cat #{unicorn_pid}`"

  w.start_grace = 30.seconds
  w.restart_grace = 30.seconds
  w.pid_file = unicorn_pid
  w.behavior(:clean_pid_file)
  w.apply_policy
end

unicorn_worker_memory_limit = 300_000
Thread.new do
  loop do
    begin
      # unicorn workers
      #
      # ps output line format:
      # 31580 275444 unicorn_rails worker[15] -c /data/github/current/config/unicorn.rb -E production -D
      # pid ram command

      lines = `ps x -o pid,rss,command | grep '[u]nicorn_rails worker'`.split("\n")
      lines.each do |line|
        parts = line.split(' ')
        if parts[1].to_i > unicorn_worker_memory_limit
          # tell the worker to die after it finishes serving its request
          ::Process.kill('QUIT', parts[0].to_i)
        end
      end
    rescue Object
      # don't die ever once we've tested this
      nil
    end

    sleep 30
  end
end
